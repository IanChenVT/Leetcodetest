/*保留自然二进制码的最高位作为格雷码的最高位，格雷码次高位为二进制码的高位与次高位异
或，其余各位与次高位的求法类似。例如，将自然二进制码1001，转换为格雷码的过程是：保留最
高位；然后将第1 位的1 和第2 位的0 异或，得到1，作为格雷码的第2 位；将第2 位的0 和第3 位
的0 异或，得到0，作为格雷码的第3 位；将第3 位的0 和第4 位的1 异或，得到1，作为格雷码的
第4 位，最终，格雷码为1101。*/
/*保留格雷码的最高位作为自然二进制码的最高位，次高位为自然二进制高位与格雷码次高位异
或，其余各位与次高位的求法类似。例如，将格雷码1000 转换为自然二进制码的过程是：保留最高
位1，作为自然二进制码的最高位；然后将自然二进制码的第1 位1 和格雷码的第2 位0 异或，得到
1，作为自然二进制码的第2 位；将自然二进制码的第2 位1 和格雷码的第3 位0 异或，得到1，作
为自然二进制码的第3 位；将自然二进制码的第3 位1 和格雷码的第4 位0 异或，得到1，作为自然
二进制码的第4 位，最终，自然二进制码为1111。*/
class Solution {
public:
    vector<int> grayCode(int n) {
      vector<int> result;
      int size=1<<n;//2^n
      result.reserve(size);
      for(int j=0;j<size;++j)
      {
          result.push_back(binary_to_gray(j));
      }
      return result;
    }
    
    unsigned int binary_to_gray(int n)
    {
        return n^(n>>1);
    }    
    unsigned int gray_to_binary(int g)
    {
        for(unsigned maks=g>>1;mask!=0;mask=mask>>1)
        {
            g^=mask;
        }
        return g;
    }
};
