/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //先序1，2，4，3，5
 //后序2，4，1，5，3
 //先序的第一个元素是根
 //中序中左边为左子树
 //中序中右边为右子树
 //然后采用递归的方法处理左右子树
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        return buildTree(begin(preorder),end(preorder),begin(inorder),end(inorder));
    }
    template<typename InputIterator>
    TreeNode *buildTree(InputIterator pre_first,InputIterator pre_last,InputIterator in_first,InputIterator in_last)
    {
        //递归终止条件是中序和先序某个数的长度为1
        if(pre_first==pre_last)
        {
            return nullptr;
        }
        if(in_first==in_last)
        {
            return nullptr;
        }
        TreeNode *root=new TreeNode(*pre_first);
        //先序的第一个元素为根，在中序找到其位置
        auto inRootPos=find(in_first,in_last,*pre_first);
        //先序左子树的长度
        size_t leftsize= distance(in_first,inRootPos);
        //处理左子树
        root->left=buildTree(next(pre_first),next(pre_first,leftsize+1),in_first,next(in_first,leftsize));
        //处理右子树
        root->right=buildTree(next(pre_first,leftsize+1),pre_last,next(inRootPos),in_last);
        return root;
    }
};
