//有限状态自动机
//状态转换矩阵，行表示状态，列表示状态转移的一种有效输入
//字符的种类：无效字符0：空格1：正负号2：数字3：点4：e：5
//数值字符的十种状态
//-1错误状态
//0初始状态，可以接受空格、正负号、数字、点
//1接收到正负号而来，可接受点、数字 比如“+”
//2由3接收到点而来，可接受空格、数字、e 比如“2.”
//3由0/1/3接收到数字，可接收数字、空格、e 比如“2”
//4由2/3/9接收到数字，可接收数字、e、空格
//5由2/3/4接收到e,可以接受正负号 比如“2.3e”
//6由状态5接收到正负号，可以接受数字，比如“2.3e+”
//7由状态5/6接收到数字而来，可以接受空格、数字“2.3e+4”
//8由状态2/3/4/7接收到空格而来，可接受空格 比如“2.3e+4 ”
//9由状态0/1接收到点而来，可以接受数字“.”
class Solution {
public:
     //字符的种类
    enum InputType
     {
          INVALID=0,//0
          SPACE,//1
          SIGN,//2
          DIGIT,//3
          DOT,//4
          EXPOINT,//5
     };
    bool isNumber(const char *s) {
      //字符串为空
      if(s==NULL)
      {
          return false;
      }
      const int transitionTable[][6]={
          -1,0,1,3,9,-1, //状态0
          -1,-1,-1,3,9,-1,//状态1
          -1,8,-1,4,-1,5,//状态2
          -1,8,-1,3,2,5,//状态3
          -1,8,-1,4,-1,5,//状态4
          -1,-1,6,7,-1,-1,//状态5
          -1,-1,-1,7,-1,-1,//状态6
          -1,8,-1,7,-1,-1,//状态7
          -1,8,-1,-1,-1,-1,//状态8
          -1,-1,-1,4,-1,-1,//状态9
          
      };
      int state=0;
      InputType input;
      //遍历整个字符串
      while(*s!='\0')
      {
          if(*s==' ')
          {
              input=SPACE;
          }
          else if(*s=='+'||*s=='-')
          {
              input=SIGN;
          }
          else if(*s>='0'&&*s<='9')
          {
              input=DIGIT;
          }
          else if(*s=='.')
          {
              input=DOT;
          }
          else if(*s=='e'||*s=='E')
          {
              input=EXPOINT;
          }
          else
          {
              input=INVALID;
          }
          state=transitionTable[state][input];
          if(state==-1)
          {
              return false;
          }
          s++;
          
      }
      return state==2||state==3||state==4||state==7||state==8;
    }
};

//使用strtod函数
class Solution {
public:
    bool isNumber(const char *s) {
		char *left;
		strtod(s,&left);
		if(s==left)
		{
			return false;
		}
		while(*left!='\0')
		{
			if(*left!=' ')
				return false;
			++left;
		}
		return true;

	}
};
