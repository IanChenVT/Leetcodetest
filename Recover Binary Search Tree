/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //建立线索二叉树
class Solution {
public:
    void recoverTree(TreeNode *root) {
        pair<TreeNode *,TreeNode*>broken;
        TreeNode *prev,*cur;
        prev=nullptr;
        cur=root;
        while(cur!=nullptr)
        {
            //左子树为空，则将当前元素入栈
            if(cur->left==nullptr)
            {
                //元素输出
                detect(broken,prev,cur);
                prev=cur;
                cur=cur->right;
            }
            else
            {
                //左子树不为空
                TreeNode *node=cur->left;
                //找到前驱元素
                while(node->right!=nullptr&&node->right!=cur)
                {
                    node=node->right;
                }
                //如果没有线索，则建立线索
                if(node->right==nullptr)
                {
                    node->right=cur;
                    cur=cur->left;
                }
                else
                {
                    //元素输出
                    detect(broken,prev,cur);
                    node->right=nullptr;
                    prev=cur;
                    cur=cur->right;
                }
            }
         
        }
        swap(broken.first->val,broken.second->val);
    }
    void detect(pair<TreeNode*,TreeNode*>&broken,TreeNode *prev,TreeNode *cur)
    {
        if(prev!=nullptr&&prev->val>cur->val)
        {
            if(broken.first==nullptr)
            {
                broken.first=prev;
            }
            broken.second=cur;
        }
    }
};
